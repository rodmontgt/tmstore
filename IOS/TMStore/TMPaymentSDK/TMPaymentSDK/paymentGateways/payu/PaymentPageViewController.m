//
//  ViewController.m
//  PaymentGateway
//
//  Created by Suraj on 22/07/15.
//  Copyright (c) 2015 Suraj. All rights reserved.
//

#import "PaymentPageViewController.h"
#import <CommonCrypto/CommonDigest.h>
#import "TMPaymentSDK.h"

@interface PaymentPageViewController(){
    UIActivityIndicatorView *activityIndicatorView;
    NSString *strMIHPayID;
    UIWebView *webviewPaymentPage;
    NSString* Base_URL;
}
@end

@implementation PaymentPageViewController


/*
 
 payUmoney Contact Details:
 Address:
 5th Floor, Pearl Towers Plot 51, Sector 32 Gurgaon, 122002
 
 Phone:
 0124-6624956,
 0124-6624970
 
 Email:
 techsupport@payumoney.com
 
 
 //// Process to Signup & generate Merchant ID, Key & Salt ////
 
 
 ////// ////// ////// ////// ////// ////// ////// ////// ////// ////// ////// ////// ////// ////// ////// ////// ////// ////// //////
 
 
 Test Environment:
 
 Recently, payUmoney has done some modifications in test environment due to which test key-JBZaLc and salt-GQs7yium will not work anymore.
 
 In order to test the gateway using a test key and salt, kindly follow these steps:
 
 1 - Go on http://test.payumoney.com/
 2 - Sign up as a merchant - use any of your valid email ids - kindly do not use a random email id.
 3 - Use a valid Mobile Number and for Phone/Landline No use your valid mobile number with a preceeding 0. (e.g. Mobile No: 9762159571 so the Landline No: 09762159571)
 4 - Complete the "Business Details"  - you may use PAN no. ABCDE1234F and DOB - 01/04/1990
 5 - Complete "Bank Account Details" (You may use IFSC- ALLA0212632)
 6 - Please leave the bank verification part.
 7 - Go to below mentioned location to get the Test Merchant Id :
 Seller Dashboard -> Settings -> My account -> Profile Settings
 
 Once you provide your test merchant id, payUmoney will approve it so that you can find your test key and salt at :
 Seller Dashboard -> Settings -> My account -> Merchant Key - Salt
 
 
 ////// ////// ////// ////// ////// ////// ////// ////// ////// ////// ////// ////// ////// ////// ////// ////// ////// ////// //////
 
 
 Production Environment:
 
 kindly register to https://www.payumoney.com/ and follow above steps with all your Genuine Bank details, contact numbers & adresses.
 Please note that the Key and Salt for Production server are different from the one we get from Test server.
 
 */

/*
 Test Environment:
 
 Card Name:   any name
 Card Number: 5123456789012346
 CVV:         123
 Expiry:      May 2017
 
 */



// You can use below Merchant Key & Salt generated by me for Testing/Demo purpose
// But try to generate yours by following all the steps so you get an idea to how it works

//#define Merchant_Key @"9HwJ5t"
//#define Salt @"2JIfn3ez"
//#define Base_URL @"https://test.payu.in"
//#define Success_URL @"https://www.google.co.in/"
//#define Failure_URL @"https://www.facebook.com"
//#define Product_Info @"Denim Jeans"
//#define Paid_Amount @"1549.00"
//#define Payee_Name @"Suraj Mirajkar"
- (id)initWithPayment:(NSDictionary*)dict {
    self = [super init];
    if (self) {
        _Merchant_Key = [dict valueForKey:@"MerchantKey"];
        _Salt = [dict valueForKey:@"SaltKey"];
        _Success_URL = [dict valueForKey:@"SuccessUrl"];
        _Failure_URL = [dict valueForKey:@"FailureUrl"];
        _Product_Info = [dict valueForKey:@"ProductInfo"];
        _Paid_Amount = [dict valueForKey:@"Amount"];
        _Payee_Name = [dict valueForKey:@"Name"];
        _Email = [dict valueForKey:@"Email"];
        _Phone = [dict valueForKey:@"Phone"];
        _Serviceprovider = [dict valueForKey:@"ServiceProvider"];
        _isTestMode = [[dict valueForKey:@"IsTestModeEnable"] boolValue];
        if (_isTestMode) {
            Base_URL = @"https://test.payu.in/";
        } else {
            Base_URL = @"https://secure.payu.in/";
        }
        _responseDelegate = (TMPaymentSDKDelegate*)[dict valueForKey:@"Delegate"];
    }
    return self;
}
- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:YES];
    PayuConfig* config = [PayuConfig sharedManager];
    [self setTitle:config.paymentPageTitle];
    [self initPayment];
}
- (void)viewWillDisappear:(BOOL)animated {
    [PaymentUtility stopGrayLoadingBar];
    [super viewWillDisappear:YES];
    [self setTitle:@""];
}
- (void)viewDidLoad {
    [super viewDidLoad];
    PayuConfig* config = [PayuConfig sharedManager];
    UIBarButtonItem *backButton = [[UIBarButtonItem alloc] initWithTitle:
                                   config.backButtonTitle style:UIBarButtonItemStyleBordered target:
                                   self action:@selector(backButtonClicked:)];
    [self.navigationItem setLeftBarButtonItem:backButton];
    [self.navigationController.navigationBar setBarTintColor:[UIColor whiteColor]];

    activityIndicatorView = [[UIActivityIndicatorView alloc] init];
    activityIndicatorView.center = self.view.center;
    [activityIndicatorView setColor:[UIColor blackColor]];
    [self.view addSubview:activityIndicatorView];
    if (webviewPaymentPage == nil) {
        CGRect rect = self.view.frame;
        rect.origin.y = self.navigationController.navigationBar.frame.size.height + 20;
        rect.size.height -= rect.origin.y;
        webviewPaymentPage = [[UIWebView alloc] initWithFrame:rect];
        [webviewPaymentPage setBackgroundColor:[UIColor clearColor]];
        [self.view addSubview:webviewPaymentPage];
        [webviewPaymentPage setScalesPageToFit:false];
        [webviewPaymentPage setDelegate:self];
    }
}
- (void)backButtonClicked:(id)sender{
    [self operationResult:false];
}
- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}
- (void)initPayment {
    int i = arc4random() % 9999999999;
    NSString *strHash = [self createSHA512:[NSString stringWithFormat:@"%d%@",i,[NSDate date]]];// Generatehash512(rnd.ToString() + DateTime.Now);
    strMIHPayID = [strHash substringToIndex:20];
    NSString *hashValue = [NSString stringWithFormat:@"%@|%@|%@|%@|%@|%@|||||||||||%@", _Merchant_Key, strMIHPayID, _Paid_Amount, _Product_Info, _Payee_Name, _Email, _Salt];
    NSString *hash = [self createSHA512:hashValue];
    NSDictionary *parameters = [NSDictionary dictionaryWithObjects:[NSArray arrayWithObjects:strMIHPayID, _Merchant_Key, _Paid_Amount, _Product_Info, _Payee_Name, _Email, _Phone,_Success_URL, _Failure_URL, hash, _Serviceprovider, nil] forKeys:[NSArray arrayWithObjects:@"txnid", @"key", @"amount", @"productinfo", @"firstname", @"email", @"phone", @"surl", @"furl", @"hash", @"service_provider", nil]];
    __block NSString *post = @"";
    [parameters enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) {
        if ([post isEqualToString:@""]) {
            post = [NSString stringWithFormat:@"%@=%@", key, obj];
        } else {
            post = [NSString stringWithFormat:@"%@&%@=%@", post, key, obj];
        }
    }];
    
    NSData *postData = [post dataUsingEncoding:NSASCIIStringEncoding allowLossyConversion:YES];
    
    NSString *postLength = [NSString stringWithFormat:@"%lu",(unsigned long)[postData length]];
    NSMutableURLRequest *request = [[NSMutableURLRequest alloc] init];
    [request setURL:[NSURL URLWithString:[NSString stringWithFormat:@"%@_payment",Base_URL]]];
    [request setHTTPMethod:@"POST"];
    [request setValue:postLength forHTTPHeaderField:@"Content-Length"];
    [request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Current-Type"];
    [request setHTTPBody:postData];
    
    [webviewPaymentPage loadRequest:request];
    [activityIndicatorView startAnimating];
}

- (NSString *)createSHA512:(NSString *)string {
    const char *cstr = [string cStringUsingEncoding:NSUTF8StringEncoding];
    NSData *data = [NSData dataWithBytes:cstr length:string.length];
    uint8_t digest[CC_SHA512_DIGEST_LENGTH];
    CC_SHA512(data.bytes, (CC_LONG)data.length, digest);
    NSMutableString* output = [NSMutableString  stringWithCapacity:CC_SHA512_DIGEST_LENGTH * 2];
    for(int i = 0; i < CC_SHA512_DIGEST_LENGTH; i++) {
        [output appendFormat:@"%02x", digest[i]];
    }
    return output;
}

#pragma UIWebView - Delegate Methods
- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)type {
    NSURL *requestURL = [[webviewPaymentPage request] URL];
    NSString *getStringFromUrl = [NSString stringWithFormat:@"%@",requestURL];
    if ([self containsString:getStringFromUrl:_Success_URL]) {
        [self operationResult:true];
        return NO;
    } else if ([self containsString:getStringFromUrl:_Failure_URL]) {
        [self operationResult:false];
        return NO;
    }
    return YES;
}
- (void)webViewDidStartLoad:(UIWebView *)webView {
    PLOG(@"%s", __PRETTY_FUNCTION__);
    UIActivityIndicatorView* sV = [PaymentUtility startGrayLoadingBar:true];
    sV.center = self.view.center;
    
    NSURL *requestURL = [[webviewPaymentPage request] URL];
    NSString *getStringFromUrl = [NSString stringWithFormat:@"%@",requestURL];
    if ([self containsString:getStringFromUrl:_Success_URL]) {
        [self operationResult:true];
    } else if ([self containsString:getStringFromUrl:_Failure_URL]) {
        [self operationResult:false];
    }
}
- (void)webViewDidFinishLoad:(UIWebView *)webView {
    PLOG(@"%s", __PRETTY_FUNCTION__);
    [PaymentUtility stopGrayLoadingBar];
    NSURL *requestURL = [[webviewPaymentPage request] URL];
    NSString *getStringFromUrl = [NSString stringWithFormat:@"%@",requestURL];
    if ([self containsString:getStringFromUrl:_Success_URL]) {
        [self operationResult:true];
    } else if ([self containsString:getStringFromUrl:_Failure_URL]) {
        [self operationResult:false];
    }
}
- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error {
    PLOG(@"%s", __PRETTY_FUNCTION__);
    NSURL *requestURL = [[webviewPaymentPage request] URL];
    NSString *getStringFromUrl = [NSString stringWithFormat:@"%@",requestURL];
    if ([self containsString:getStringFromUrl:_Success_URL]) {
        [self operationResult:true];
        return;
    } else if ([self containsString:getStringFromUrl:_Failure_URL]) {
        [self operationResult:false];
        return;
    }

    
    PLOG(@"WebView failed loading with requestURL: %@ with error: %@ & error code: %ld",requestURL, [error localizedDescription], (long)[error code]);
    if (error.code == -1009 || error.code == -1003 || error.code == -1001) { //error.code == -999
        [self operationResult:false];
    }
}
- (BOOL)containsString: (NSString *)string : (NSString*)substring {
    PLOG(@"%s", __PRETTY_FUNCTION__);
    return [string rangeOfString:substring].location != NSNotFound;
}
- (void)operationResult:(BOOL)success{
    PLOG(@"%s", __PRETTY_FUNCTION__);
    [PaymentUtility stopGrayLoadingBar];
    [webviewPaymentPage setDelegate:nil];
    [webviewPaymentPage stopLoading];
    [activityIndicatorView stopAnimating];
    if (success) {
        [self dismissViewControllerAnimated:YES completion:^{
            [_responseDelegate postCompletionCallbackWithSuccess:nil];
            _responseDelegate = nil;
        }];
    } else {
        [self dismissViewControllerAnimated:YES completion:^{
            [_responseDelegate postCompletionCallbackWithFailure:nil];
            _responseDelegate = nil;
        }];
    }
}


@end
