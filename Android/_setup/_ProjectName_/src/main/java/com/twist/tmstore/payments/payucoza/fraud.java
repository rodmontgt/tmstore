package com.twist.tmstore.payments.payucoza;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 7/4/2014 4:34:19 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.util.Hashtable;

public class fraud implements KvmSerializable {

    public String caseManagerNote;
    public String checkFraudOverride;
    public String merchantWebSite;
    public String pcFingerPrint;
    public String resultCode;
    public String resultMessage;

    public fraud() {
    }

    public fraud(SoapObject soapObject) {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("caseManagerNote")) {
            Object obj = soapObject.getProperty("caseManagerNote");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                caseManagerNote = j.toString();
            } else if (obj != null && obj instanceof String) {
                caseManagerNote = (String) obj;
            }
        }
        if (soapObject.hasProperty("checkFraudOverride")) {
            Object obj = soapObject.getProperty("checkFraudOverride");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                checkFraudOverride = j.toString();
            } else if (obj != null && obj instanceof String) {
                checkFraudOverride = (String) obj;
            }
        }
        if (soapObject.hasProperty("merchantWebSite")) {
            Object obj = soapObject.getProperty("merchantWebSite");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                merchantWebSite = j.toString();
            } else if (obj != null && obj instanceof String) {
                merchantWebSite = (String) obj;
            }
        }
        if (soapObject.hasProperty("pcFingerPrint")) {
            Object obj = soapObject.getProperty("pcFingerPrint");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                pcFingerPrint = j.toString();
            } else if (obj != null && obj instanceof String) {
                pcFingerPrint = (String) obj;
            }
        }
        if (soapObject.hasProperty("resultCode")) {
            Object obj = soapObject.getProperty("resultCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                resultCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                resultCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("resultMessage")) {
            Object obj = soapObject.getProperty("resultMessage");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                resultMessage = j.toString();
            } else if (obj != null && obj instanceof String) {
                resultMessage = (String) obj;
            }
        }
    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            case 0:
                return caseManagerNote;
            case 1:
                return checkFraudOverride;
            case 2:
                return merchantWebSite;
            case 3:
                return pcFingerPrint;
            case 4:
                return resultCode;
            case 5:
                return resultMessage;
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 6;
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "caseManagerNote";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "checkFraudOverride";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "merchantWebSite";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "pcFingerPrint";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "resultCode";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "resultMessage";
                break;
        }
    }

    @Override
    public void setProperty(int arg0, Object arg1) {
    }

}
