package com.twist.tmstore.payments.payucoza;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 7/4/2014 4:34:19 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.util.Hashtable;

public class transactionRecord implements KvmSerializable {

    public String anonymousUser;
    public String deductionDay;
    public String endDate;
    public String frequency;
    public String managedBy;
    public String recurrences;
    public String startDate;
    public String statementDescription;

    public transactionRecord() {
    }

    public transactionRecord(SoapObject soapObject) {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("anonymousUser")) {
            Object obj = soapObject.getProperty("anonymousUser");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                anonymousUser = j.toString();
            } else if (obj != null && obj instanceof String) {
                anonymousUser = (String) obj;
            }
        }
        if (soapObject.hasProperty("deductionDay")) {
            Object obj = soapObject.getProperty("deductionDay");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                deductionDay = j.toString();
            } else if (obj != null && obj instanceof String) {
                deductionDay = (String) obj;
            }
        }
        if (soapObject.hasProperty("endDate")) {
            Object obj = soapObject.getProperty("endDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                endDate = j.toString();
            } else if (obj != null && obj instanceof String) {
                endDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("frequency")) {
            Object obj = soapObject.getProperty("frequency");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                frequency = j.toString();
            } else if (obj != null && obj instanceof String) {
                frequency = (String) obj;
            }
        }
        if (soapObject.hasProperty("managedBy")) {
            Object obj = soapObject.getProperty("managedBy");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                managedBy = j.toString();
            } else if (obj != null && obj instanceof String) {
                managedBy = (String) obj;
            }
        }
        if (soapObject.hasProperty("recurrences")) {
            Object obj = soapObject.getProperty("recurrences");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                recurrences = j.toString();
            } else if (obj != null && obj instanceof String) {
                recurrences = (String) obj;
            }
        }
        if (soapObject.hasProperty("startDate")) {
            Object obj = soapObject.getProperty("startDate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                startDate = j.toString();
            } else if (obj != null && obj instanceof String) {
                startDate = (String) obj;
            }
        }
        if (soapObject.hasProperty("statementDescription")) {
            Object obj = soapObject.getProperty("statementDescription");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                statementDescription = j.toString();
            } else if (obj != null && obj instanceof String) {
                statementDescription = (String) obj;
            }
        }
    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            case 0:
                return anonymousUser;
            case 1:
                return deductionDay;
            case 2:
                return endDate;
            case 3:
                return frequency;
            case 4:
                return managedBy;
            case 5:
                return recurrences;
            case 6:
                return startDate;
            case 7:
                return statementDescription;
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 8;
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "anonymousUser";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "deductionDay";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "endDate";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "frequency";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "managedBy";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "recurrences";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "startDate";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "statementDescription";
                break;
        }
    }

    @Override
    public void setProperty(int arg0, Object arg1) {
    }

}
