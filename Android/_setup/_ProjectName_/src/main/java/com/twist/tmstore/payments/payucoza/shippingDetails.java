package com.twist.tmstore.payments.payucoza;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 7/4/2014 4:34:19 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.util.Hashtable;

public class shippingDetails implements KvmSerializable {

    public String shippingAddress1;
    public String shippingAddress2;
    public String shippingAddressCity;
    public String shippingCountryCode;
    public String shippingEmail;
    public String shippingFax;
    public String shippingId;
    public String shippingLastName;
    public String shippingMethod;
    public String shippingPhone;
    public String shippingPostCode;
    public String shippingStateCode;
    public String shppingFirstName;

    public shippingDetails() {
    }

    public shippingDetails(SoapObject soapObject) {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("shippingAddress1")) {
            Object obj = soapObject.getProperty("shippingAddress1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                shippingAddress1 = j.toString();
            } else if (obj != null && obj instanceof String) {
                shippingAddress1 = (String) obj;
            }
        }
        if (soapObject.hasProperty("shippingAddress2")) {
            Object obj = soapObject.getProperty("shippingAddress2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                shippingAddress2 = j.toString();
            } else if (obj != null && obj instanceof String) {
                shippingAddress2 = (String) obj;
            }
        }
        if (soapObject.hasProperty("shippingAddressCity")) {
            Object obj = soapObject.getProperty("shippingAddressCity");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                shippingAddressCity = j.toString();
            } else if (obj != null && obj instanceof String) {
                shippingAddressCity = (String) obj;
            }
        }
        if (soapObject.hasProperty("shippingCountryCode")) {
            Object obj = soapObject.getProperty("shippingCountryCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                shippingCountryCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                shippingCountryCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("shippingEmail")) {
            Object obj = soapObject.getProperty("shippingEmail");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                shippingEmail = j.toString();
            } else if (obj != null && obj instanceof String) {
                shippingEmail = (String) obj;
            }
        }
        if (soapObject.hasProperty("shippingFax")) {
            Object obj = soapObject.getProperty("shippingFax");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                shippingFax = j.toString();
            } else if (obj != null && obj instanceof String) {
                shippingFax = (String) obj;
            }
        }
        if (soapObject.hasProperty("shippingId")) {
            Object obj = soapObject.getProperty("shippingId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                shippingId = j.toString();
            } else if (obj != null && obj instanceof String) {
                shippingId = (String) obj;
            }
        }
        if (soapObject.hasProperty("shippingLastName")) {
            Object obj = soapObject.getProperty("shippingLastName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                shippingLastName = j.toString();
            } else if (obj != null && obj instanceof String) {
                shippingLastName = (String) obj;
            }
        }
        if (soapObject.hasProperty("shippingMethod")) {
            Object obj = soapObject.getProperty("shippingMethod");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                shippingMethod = j.toString();
            } else if (obj != null && obj instanceof String) {
                shippingMethod = (String) obj;
            }
        }
        if (soapObject.hasProperty("shippingPhone")) {
            Object obj = soapObject.getProperty("shippingPhone");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                shippingPhone = j.toString();
            } else if (obj != null && obj instanceof String) {
                shippingPhone = (String) obj;
            }
        }
        if (soapObject.hasProperty("shippingPostCode")) {
            Object obj = soapObject.getProperty("shippingPostCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                shippingPostCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                shippingPostCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("shippingStateCode")) {
            Object obj = soapObject.getProperty("shippingStateCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                shippingStateCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                shippingStateCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("shppingFirstName")) {
            Object obj = soapObject.getProperty("shppingFirstName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                shppingFirstName = j.toString();
            } else if (obj != null && obj instanceof String) {
                shppingFirstName = (String) obj;
            }
        }
    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            case 0:
                return shippingAddress1;
            case 1:
                return shippingAddress2;
            case 2:
                return shippingAddressCity;
            case 3:
                return shippingCountryCode;
            case 4:
                return shippingEmail;
            case 5:
                return shippingFax;
            case 6:
                return shippingId;
            case 7:
                return shippingLastName;
            case 8:
                return shippingMethod;
            case 9:
                return shippingPhone;
            case 10:
                return shippingPostCode;
            case 11:
                return shippingStateCode;
            case 12:
                return shppingFirstName;
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 13;
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "shippingAddress1";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "shippingAddress2";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "shippingAddressCity";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "shippingCountryCode";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "shippingEmail";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "shippingFax";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "shippingId";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "shippingLastName";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "shippingMethod";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "shippingPhone";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "shippingPostCode";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "shippingStateCode";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "shppingFirstName";
                break;
        }
    }

    @Override
    public void setProperty(int arg0, Object arg1) {
    }

}
