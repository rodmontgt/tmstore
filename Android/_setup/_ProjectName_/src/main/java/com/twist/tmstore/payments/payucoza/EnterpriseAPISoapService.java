package com.twist.tmstore.payments.payucoza;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 7/4/2014 4:34:19 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import android.os.AsyncTask;

import org.ksoap2.HeaderProperty;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.AttributeInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.ksoap2.transport.KeepAliveHttpsTransportSE;
import org.kxml2.kdom.Element;
import org.kxml2.kdom.Node;

import java.io.IOException;
import java.util.List;

/**
 * Adapted by PJTFernandes
 */
public class EnterpriseAPISoapService {

    static final int MAX_CONNECTIONS = 5;
    public String NAMESPACE = "http://soap.api.controller.web.payjar.com/";
    public String url = "";
    public int timeOut = 60000;
    public IWsdl2CodeEvents eventHandler;
    public WS_Enums.SoapProtocolVersion soapVersion;

    public EnterpriseAPISoapService() {
    }

    public EnterpriseAPISoapService(IWsdl2CodeEvents eventHandler) {
        this.eventHandler = eventHandler;
    }

    public EnterpriseAPISoapService(IWsdl2CodeEvents eventHandler, String url) {
        this.eventHandler = eventHandler;
        this.url = url;
    }

    public EnterpriseAPISoapService(IWsdl2CodeEvents eventHandler, String url, int timeOutInSeconds) {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }

    public void setTimeOut(int seconds) {
        this.timeOut = seconds * 1000;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public void doTransactionAsync(String api, String safekey, WS_Enums.transactionType transactionType, boolean transactionTypeSpecified, WS_Enums.authenticationType authenticationType, boolean authenticationTypeSpecified, additionalInfo additionalInformation, customer customer, basket basket, fraud fraud, VectorcreditCard creditcard, Vectoreft eft, VectordiscoveryMiles discoveryMiles, VectorpayPal payPal, VectordebitCard debitcard, VectorloyaltyCard loyalty, VectorbankTransfer bankTransfer, Vectorwallet wallet, VectorthirdParty thirdParty, Vectorebucks ebucks, autoPay autopay, soulstace soulstace, globalpay globalpay, VectorcustomField customfield, credit credit, transactionRecord transactionRecord) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        doTransactionAsync(api, safekey, transactionType, transactionTypeSpecified, authenticationType, authenticationTypeSpecified, additionalInformation, customer, basket, fraud, creditcard, eft, discoveryMiles, payPal, debitcard, loyalty, bankTransfer, wallet, thirdParty, ebucks, autopay, soulstace, globalpay, customfield, credit, transactionRecord, null);
    }

    public void doTransactionAsync(final String api, final String safekey, final WS_Enums.transactionType transactionType, final boolean transactionTypeSpecified, final WS_Enums.authenticationType authenticationType, final boolean authenticationTypeSpecified, final additionalInfo additionalInformation, final customer customer, final basket basket, final fraud fraud, final VectorcreditCard creditcard, final Vectoreft eft, final VectordiscoveryMiles discoveryMiles, final VectorpayPal payPal, final VectordebitCard debitcard, final VectorloyaltyCard loyalty, final VectorbankTransfer bankTransfer, final Vectorwallet wallet, final VectorthirdParty thirdParty, final Vectorebucks ebucks, final autoPay autopay, final soulstace soulstace, final globalpay globalpay, final VectorcustomField customfield, final credit credit, final transactionRecord transactionRecord, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, DoTransactionResponseMessage>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            @Override
            protected DoTransactionResponseMessage doInBackground(Void... params) {
                return doTransaction(api, safekey, transactionType, transactionTypeSpecified, authenticationType, authenticationTypeSpecified, additionalInformation, customer, basket, fraud, creditcard, eft, discoveryMiles, payPal, debitcard, loyalty, bankTransfer, wallet, thirdParty, ebucks, autopay, soulstace, globalpay, customfield, credit, transactionRecord, headers);
            }

            @Override
            protected void onPostExecute(DoTransactionResponseMessage result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("doTransaction", result);
                }
            }
        }.execute();
    }

    public DoTransactionResponseMessage doTransaction(String api, String safekey, WS_Enums.transactionType transactionType, boolean transactionTypeSpecified, WS_Enums.authenticationType authenticationType, boolean authenticationTypeSpecified, additionalInfo additionalInformation, customer customer, basket basket, fraud fraud, VectorcreditCard creditcard, Vectoreft eft, VectordiscoveryMiles discoveryMiles, VectorpayPal payPal, VectordebitCard debitcard, VectorloyaltyCard loyalty, VectorbankTransfer bankTransfer, Vectorwallet wallet, VectorthirdParty thirdParty, Vectorebucks ebucks, autoPay autopay, soulstace soulstace, globalpay globalpay, VectorcustomField customfield, credit credit, transactionRecord transactionRecord) {
        return doTransaction(api, safekey, transactionType, transactionTypeSpecified, authenticationType, authenticationTypeSpecified, additionalInformation, customer, basket, fraud, creditcard, eft, discoveryMiles, payPal, debitcard, loyalty, bankTransfer, wallet, thirdParty, ebucks, autopay, soulstace, globalpay, customfield, credit, transactionRecord, null);
    }

    public DoTransactionResponseMessage doTransaction(String api, String safekey, WS_Enums.transactionType transactionType, boolean transactionTypeSpecified, WS_Enums.authenticationType authenticationType, boolean authenticationTypeSpecified, additionalInfo additionalInformation, customer customer, basket basket, fraud fraud, VectorcreditCard creditcard, Vectoreft eft, VectordiscoveryMiles discoveryMiles, VectorpayPal payPal, VectordebitCard debitcard, VectorloyaltyCard loyalty, VectorbankTransfer bankTransfer, Vectorwallet wallet, VectorthirdParty thirdParty, Vectorebucks ebucks, autoPay autopay, soulstace soulstace, globalpay globalpay, VectorcustomField customfield, credit credit, transactionRecord transactionRecord, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://soap.api.controller.web.payjar.com/", "doTransaction");
        soapEnvelope.addMapping("http://soap.api.controller.web.payjar.com/", "AdditionalInformation", new additionalInfo().getClass());
        soapEnvelope.addMapping("http://soap.api.controller.web.payjar.com/", "Customer", new customer().getClass());
        soapEnvelope.addMapping("http://soap.api.controller.web.payjar.com/", "Basket", new basket().getClass());
        soapEnvelope.addMapping("http://soap.api.controller.web.payjar.com/", "Fraud", new fraud().getClass());
        soapEnvelope.addMapping("http://soap.api.controller.web.payjar.com/", "Autopay", new autoPay().getClass());
        soapEnvelope.addMapping("http://soap.api.controller.web.payjar.com/", "Soulstace", new soulstace().getClass());
        soapEnvelope.addMapping("http://soap.api.controller.web.payjar.com/", "Globalpay", new globalpay().getClass());
        soapEnvelope.addMapping("http://soap.api.controller.web.payjar.com/", "Credit", new credit().getClass());
        soapEnvelope.addMapping("http://soap.api.controller.web.payjar.com/", "TransactionRecord", new transactionRecord().getClass());
        soapReq.addProperty("Api", api);
        soapReq.addProperty("Safekey", safekey);
        soapReq.addProperty("TransactionType", transactionType.toString());
        soapReq.addProperty("TransactionTypeSpecified", transactionTypeSpecified);
        soapReq.addProperty("AuthenticationType", authenticationType.toString());
        soapReq.addProperty("AuthenticationTypeSpecified", authenticationTypeSpecified);
        soapReq.addProperty("AdditionalInformation", additionalInformation);
        soapReq.addProperty("Customer", customer);
        soapReq.addProperty("Basket", basket);
        soapReq.addProperty("Fraud", fraud);
        soapReq.addProperty("Creditcard", creditcard);
        soapReq.addProperty("Eft", eft);
        soapReq.addProperty("DiscoveryMiles", discoveryMiles);
        soapReq.addProperty("PayPal", payPal);
        soapReq.addProperty("Debitcard", debitcard);
        soapReq.addProperty("Loyalty", loyalty);
        soapReq.addProperty("BankTransfer", bankTransfer);
        soapReq.addProperty("Wallet", wallet);
        soapReq.addProperty("ThirdParty", thirdParty);
        soapReq.addProperty("Ebucks", ebucks);
        soapReq.addProperty("Autopay", autopay);
        soapReq.addProperty("Soulstace", soulstace);
        soapReq.addProperty("Globalpay", globalpay);
        soapReq.addProperty("Customfield", customfield);
        soapReq.addProperty("Credit", credit);
        soapReq.addProperty("TransactionRecord", transactionRecord);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://soap.api.controller.web.payjar.com/doTransaction", soapEnvelope, headers);
            } else {
                httpTransport.call("http://soap.api.controller.web.payjar.com/doTransaction", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    DoTransactionResponseMessage resultVariable = new DoTransactionResponseMessage(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void managePaymentMethodAsync(String api, String safekey, WS_Enums.managePaymentMethodType managePaymentMethodType, boolean managePaymentMethodTypeSpecified, additionalInfo additionalInformation, customer customer, VectorcustomField customfield) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        managePaymentMethodAsync(api, safekey, managePaymentMethodType, managePaymentMethodTypeSpecified, additionalInformation, customer, customfield, null);
    }

    public void managePaymentMethodAsync(final String api, final String safekey, final WS_Enums.managePaymentMethodType managePaymentMethodType, final boolean managePaymentMethodTypeSpecified, final additionalInfo additionalInformation, final customer customer, final VectorcustomField customfield, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, ManagePaymentMethodResponseMessage>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            @Override
            protected ManagePaymentMethodResponseMessage doInBackground(Void... params) {
                return managePaymentMethod(api, safekey, managePaymentMethodType, managePaymentMethodTypeSpecified, additionalInformation, customer, customfield, headers);
            }

            @Override
            protected void onPostExecute(ManagePaymentMethodResponseMessage result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("managePaymentMethod", result);
                }
            }
        }.execute();
    }

    public ManagePaymentMethodResponseMessage managePaymentMethod(String api, String safekey, WS_Enums.managePaymentMethodType managePaymentMethodType, boolean managePaymentMethodTypeSpecified, additionalInfo additionalInformation, customer customer, VectorcustomField customfield) {
        return managePaymentMethod(api, safekey, managePaymentMethodType, managePaymentMethodTypeSpecified, additionalInformation, customer, customfield, null);
    }

    public ManagePaymentMethodResponseMessage managePaymentMethod(String api, String safekey, WS_Enums.managePaymentMethodType managePaymentMethodType, boolean managePaymentMethodTypeSpecified, additionalInfo additionalInformation, customer customer, VectorcustomField customfield, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://soap.api.controller.web.payjar.com/", "managePaymentMethod");
        soapEnvelope.addMapping("http://soap.api.controller.web.payjar.com/", "AdditionalInformation", new additionalInfo().getClass());
        soapEnvelope.addMapping("http://soap.api.controller.web.payjar.com/", "Customer", new customer().getClass());
        soapReq.addProperty("Api", api);
        soapReq.addProperty("Safekey", safekey);
        soapReq.addProperty("managePaymentMethodType", managePaymentMethodType.toString());
        soapReq.addProperty("managePaymentMethodTypeSpecified", managePaymentMethodTypeSpecified);
        soapReq.addProperty("AdditionalInformation", additionalInformation);
        soapReq.addProperty("Customer", customer);
        soapReq.addProperty("Customfield", customfield);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://soap.api.controller.web.payjar.com/managePaymentMethod", soapEnvelope, headers);
            } else {
                httpTransport.call("http://soap.api.controller.web.payjar.com/managePaymentMethod", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    ManagePaymentMethodResponseMessage resultVariable = new ManagePaymentMethodResponseMessage(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void doDeleteTransactionAsync(String api, String safekey, WS_Enums.deleteTransactionType deleteTransactionType, boolean deleteTransactionTypeSpecified, VectorcustomField customfield) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        doDeleteTransactionAsync(api, safekey, deleteTransactionType, deleteTransactionTypeSpecified, customfield, null);
    }

    public void doDeleteTransactionAsync(final String api, final String safekey, final WS_Enums.deleteTransactionType deleteTransactionType, final boolean deleteTransactionTypeSpecified, final VectorcustomField customfield, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, DeleteTransactionResponseMessage>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            @Override
            protected DeleteTransactionResponseMessage doInBackground(Void... params) {
                return doDeleteTransaction(api, safekey, deleteTransactionType, deleteTransactionTypeSpecified, customfield, headers);
            }

            @Override
            protected void onPostExecute(DeleteTransactionResponseMessage result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("doDeleteTransaction", result);
                }
            }
        }.execute();
    }

    public DeleteTransactionResponseMessage doDeleteTransaction(String api, String safekey, WS_Enums.deleteTransactionType deleteTransactionType, boolean deleteTransactionTypeSpecified, VectorcustomField customfield) {
        return doDeleteTransaction(api, safekey, deleteTransactionType, deleteTransactionTypeSpecified, customfield, null);
    }

    public DeleteTransactionResponseMessage doDeleteTransaction(String api, String safekey, WS_Enums.deleteTransactionType deleteTransactionType, boolean deleteTransactionTypeSpecified, VectorcustomField customfield, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://soap.api.controller.web.payjar.com/", "doDeleteTransaction");
        soapReq.addProperty("Api", api);
        soapReq.addProperty("Safekey", safekey);
        soapReq.addProperty("deleteTransactionType", deleteTransactionType.toString());
        soapReq.addProperty("deleteTransactionTypeSpecified", deleteTransactionTypeSpecified);
        soapReq.addProperty("Customfield", customfield);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://soap.api.controller.web.payjar.com/doDeleteTransaction", soapEnvelope, headers);
            } else {
                httpTransport.call("http://soap.api.controller.web.payjar.com/doDeleteTransaction", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    DeleteTransactionResponseMessage resultVariable = new DeleteTransactionResponseMessage(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void getTransactionAsync(String api, String safekey, additionalInfo additionalInformation, String username, String password) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getTransactionAsync(api, safekey, additionalInformation, null, username, password);
    }

    public void getTransactionAsync(final String api, final String safekey, final additionalInfo additionalInformation, final List<HeaderProperty> headers, final String username, final String password) throws Exception {

        new AsyncTask<Void, Void, GetTransactionResponseMessage>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            @Override
            protected GetTransactionResponseMessage doInBackground(Void... params) {
                return getTransaction(api, safekey, additionalInformation, headers, username, password);
            }

            @Override
            protected void onPostExecute(GetTransactionResponseMessage result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("getTransaction", result);
                }
            }
        }.execute();
    }

    public GetTransactionResponseMessage getTransaction(String api, String safekey, additionalInfo additionalInformation, String username, String password) {
        return getTransaction(api, safekey, additionalInformation, null, username, password);
    }

    public GetTransactionResponseMessage getTransaction(String api, String safekey, additionalInfo additionalInformation, List<HeaderProperty> headers, String username, String password) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        soapEnvelope.setAddAdornments(true);
        SoapObject soapReq = new SoapObject("", "n1:getTransaction");

        //getTransaction namespace, NB for PAYU
        AttributeInfo attributeInfo = new AttributeInfo();
        attributeInfo.setValue("http://soap.api.controller.web.payjar.com/");
        attributeInfo.setName("xmlns:n1");
        soapReq.addAttribute(attributeInfo);

        soapEnvelope.addMapping("http://soap.api.controller.web.payjar.com/", "AdditionalInformation", new additionalInfo().getClass());
        soapReq.addProperty("Api", api);
        soapReq.addProperty("Safekey", safekey);
        additionalInformation.isGetTransaction = true;
        soapReq.addProperty("AdditionalInformation", additionalInformation);
        soapEnvelope.setOutputSoapObject(soapReq);

        //set security header for PAYU
        Element header[] = new Element[1];
        header[0] = new Element().createElement("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "Security");
        header[0].setAttribute(null, "v:mustUnderstand", "1");

        Element to = new Element().createElement("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "UsernameToken");

        Element action1 = new Element().createElement(null, "n0:Username");
        action1.setAttribute("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", "Id", "UsernameToken-9");
        action1.addChild(Node.TEXT, username);
        to.addChild(Node.ELEMENT, action1);

        Element action2 = new Element().createElement(null, "n0:Password");
        action2.setAttribute(null, "Type", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText");
        action2.addChild(Node.TEXT, password);
        to.addChild(Node.ELEMENT, action2);

        header[0].addChild(Node.ELEMENT, to);

        soapEnvelope.headerOut = header;

        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        httpTransport.debug = true;
        try {
            httpTransport.getServiceConnection().setRequestProperty("Connection", "close");
            System.setProperty("http.keepAlive", "false");
            httpTransport.getServiceConnection().setRequestProperty("Accept-Encoding", "gzip");
            if (headers != null) {
                httpTransport.call("http://soap.api.controller.web.payjar.com/getTransaction", soapEnvelope, headers);
            } else {
                sendgetTransaction("http://soap.api.controller.web.payjar.com/getTransaction", soapEnvelope, 0);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    GetTransactionResponseMessage resultVariable = new GetTransactionResponseMessage(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void sendgetTransaction(String url, SoapEnvelope soapEnvelope, int failures) throws Exception {
        KeepAliveHttpsTransportSE httpTransport = null;

        try {
            // initialize connection...
            TrustManagerMunipulator.allowAllSSL();
            httpTransport = new KeepAliveHttpsTransportSE("staging.payu.co.za", 443, "/service/PayUAPI/getTransaction", timeOut);
            httpTransport.debug = true;
            httpTransport.getServiceConnection().setRequestProperty("Connection", "close");
            System.setProperty("http.keepAlive", "false");
            httpTransport.getServiceConnection().setRequestProperty("Accept-Encoding", "gzip");

            httpTransport.call(url, soapEnvelope);
            if (failures > 0 && failures <= MAX_CONNECTIONS) {
                httpTransport.getServiceConnection().setRequestProperty("Connection", "close");

            }

            // return response (T) from connection...
        } catch (Exception e) {
            if (failures <= MAX_CONNECTIONS) {
                disconnect(httpTransport);
                httpTransport = null;

                sendgetTransaction(url, soapEnvelope, failures + 1);
            }

            throw e;
        } finally {
            disconnect(httpTransport);
        }
    }

    void disconnect(HttpTransportSE connection) throws IOException {
        if (connection != null) {
            connection.getServiceConnection().disconnect();
        }
    }

    public void getLookupTransactionAsync(String api, String safekey, WS_Enums.lookupTransactionType lookupTransactionType, boolean lookupTransactionTypeSpecified, VectorcustomField customfield) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getLookupTransactionAsync(api, safekey, lookupTransactionType, lookupTransactionTypeSpecified, customfield, null);
    }

    public void getLookupTransactionAsync(final String api, final String safekey, final WS_Enums.lookupTransactionType lookupTransactionType, final boolean lookupTransactionTypeSpecified, final VectorcustomField customfield, final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, LookupTransactionResponseMessage>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            @Override
            protected LookupTransactionResponseMessage doInBackground(Void... params) {
                return getLookupTransaction(api, safekey, lookupTransactionType, lookupTransactionTypeSpecified, customfield, headers);
            }

            @Override
            protected void onPostExecute(LookupTransactionResponseMessage result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("getLookupTransaction", result);
                }
            }
        }.execute();
    }

    public LookupTransactionResponseMessage getLookupTransaction(String api, String safekey, WS_Enums.lookupTransactionType lookupTransactionType, boolean lookupTransactionTypeSpecified, VectorcustomField customfield) {
        return getLookupTransaction(api, safekey, lookupTransactionType, lookupTransactionTypeSpecified, customfield, null);
    }

    public LookupTransactionResponseMessage getLookupTransaction(String api, String safekey, WS_Enums.lookupTransactionType lookupTransactionType, boolean lookupTransactionTypeSpecified, VectorcustomField customfield, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://soap.api.controller.web.payjar.com/", "getLookupTransaction");
        soapReq.addProperty("Api", api);
        soapReq.addProperty("Safekey", safekey);
        soapReq.addProperty("lookupTransactionType", lookupTransactionType.toString());
        soapReq.addProperty("lookupTransactionTypeSpecified", lookupTransactionTypeSpecified);
        soapReq.addProperty("Customfield", customfield);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://soap.api.controller.web.payjar.com/getLookupTransaction", soapEnvelope, headers);
            } else {
                httpTransport.call("http://soap.api.controller.web.payjar.com/getLookupTransaction", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    LookupTransactionResponseMessage resultVariable = new LookupTransactionResponseMessage(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void setTransactionAsync(String api, String safekey, WS_Enums.transactionType transactionType, boolean transactionTypeSpecified, boolean stage, boolean stageSpecified, additionalInfo additionalInformation, customer customer, basket basket, fraud fraud, VectorcreditCard creditcard, Vectoreft eft, VectorloyaltyCard loyalty, VectorbankTransfer bankTransfer, ebucks ebucks, autoPay autopay, soulstace soulstace, globalpay globalpay, VectorcustomField customfield, transactionRecord transactionRecord, String username, String password) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        setTransactionAsync(api, safekey, transactionType, transactionTypeSpecified, stage, stageSpecified, additionalInformation, customer, basket, fraud, creditcard, eft, loyalty, bankTransfer, ebucks, autopay, soulstace, globalpay, customfield, transactionRecord, null, username, password);
    }

    public void setTransactionAsync(final String api, final String safekey, final WS_Enums.transactionType transactionType, final boolean transactionTypeSpecified, final boolean stage, final boolean stageSpecified, final additionalInfo additionalInformation, final customer customer, final basket basket, final fraud fraud, final VectorcreditCard creditcard, final Vectoreft eft, final VectorloyaltyCard loyalty, final VectorbankTransfer bankTransfer, final ebucks ebucks, final autoPay autopay, final soulstace soulstace, final globalpay globalpay, final VectorcustomField customfield, final transactionRecord transactionRecord, final List<HeaderProperty> headers, final String username, final String password) throws Exception {

        new AsyncTask<Void, Void, SetTransactionResponseMessage>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            @Override
            protected SetTransactionResponseMessage doInBackground(Void... params) {
                return setTransaction(api, safekey, transactionType, transactionTypeSpecified, stage, stageSpecified, additionalInformation, customer, basket, fraud, creditcard, eft, loyalty, bankTransfer, ebucks, autopay, soulstace, globalpay, customfield, transactionRecord, headers, username, password);
            }

            @Override
            protected void onPostExecute(SetTransactionResponseMessage result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("setTransaction", result);
                }
            }
        }.execute();
    }

    public SetTransactionResponseMessage setTransaction(String api, String safekey, WS_Enums.transactionType transactionType, boolean transactionTypeSpecified, boolean stage, boolean stageSpecified, additionalInfo additionalInformation, customer customer, basket basket, fraud fraud, VectorcreditCard creditcard, Vectoreft eft, VectorloyaltyCard loyalty, VectorbankTransfer bankTransfer, ebucks ebucks, autoPay autopay, soulstace soulstace, globalpay globalpay, VectorcustomField customfield, transactionRecord transactionRecord, List<HeaderProperty> headers, String username, String password) {
        return setTransaction2(api, safekey, transactionType, transactionTypeSpecified, stage, stageSpecified, additionalInformation, customer, basket, fraud, creditcard, eft, loyalty, bankTransfer, ebucks, autopay, soulstace, globalpay, customfield, transactionRecord, headers, username, password);
    }

    public SetTransactionResponseMessage setTransaction2(String api, String safekey, WS_Enums.transactionType transactionType, boolean transactionTypeSpecified, boolean stage, boolean stageSpecified, additionalInfo additionalInformation, customer customer, basket basket, fraud fraud, VectorcreditCard creditcard, Vectoreft eft, VectorloyaltyCard loyalty, VectorbankTransfer bankTransfer, ebucks ebucks, autoPay autopay, soulstace soulstace, globalpay globalpay, VectorcustomField customfield, transactionRecord transactionRecord, List<HeaderProperty> headers, String username, String password) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = false;
        soapEnvelope.dotNet = true;
        soapEnvelope.setAddAdornments(true);
        SoapObject soapReq = new SoapObject("", "n1:setTransaction");

        //settranaction namespace, NB for PAYU
        AttributeInfo attributeInfo = new AttributeInfo();
        attributeInfo.setValue("http://soap.api.controller.web.payjar.com/");
        attributeInfo.setName("xmlns:n1");
        soapReq.addAttribute(attributeInfo);

        soapEnvelope.addMapping("http://soap.api.controller.web.payjar.com/", "AdditionalInformation", new additionalInfo().getClass());
        soapEnvelope.addMapping("http://soap.api.controller.web.payjar.com/", "Customer", new customer().getClass());
        soapEnvelope.addMapping("http://soap.api.controller.web.payjar.com/", "Basket", new basket().getClass());
        soapEnvelope.addMapping("http://soap.api.controller.web.payjar.com/", "Fraud", new fraud().getClass());
        soapEnvelope.addMapping("http://soap.api.controller.web.payjar.com/", "Ebucks", new ebucks().getClass());
        soapEnvelope.addMapping("http://soap.api.controller.web.payjar.com/", "Autopay", new autoPay().getClass());
        soapEnvelope.addMapping("http://soap.api.controller.web.payjar.com/", "Soulstace", new soulstace().getClass());
        soapEnvelope.addMapping("http://soap.api.controller.web.payjar.com/", "Globalpay", new globalpay().getClass());
        soapEnvelope.addMapping("http://soap.api.controller.web.payjar.com/", "TransactionRecord", new transactionRecord().getClass());

        soapReq.addProperty("Customer", customer);
        soapReq.addProperty("Api", api);
        soapReq.addProperty("Safekey", safekey);
        if (transactionTypeSpecified)
            soapReq.addProperty("TransactionType", transactionType.toString());
        if (stageSpecified)
            soapReq.addProperty("Stage", stage);
        soapReq.addProperty("AdditionalInformation", additionalInformation);
        soapReq.addProperty("Basket", basket);
//        soapReq.addProperty("Fraud", fraud);
//        soapReq.addProperty("Creditcard", creditcard);
//        soapReq.addProperty("Loyalty", loyalty);
//        soapReq.addProperty("BankTransfer", bankTransfer);
//        soapReq.addProperty("Ebucks", ebucks);
//        soapReq.addProperty("Autopay", autopay);
//        soapReq.addProperty("Soulstace", soulstace);
//        soapReq.addProperty("Globalpay", globalpay);
        //soapReq.addProperty("Customfield", customfield);
        soapReq.addProperty("TransactionRecord", transactionRecord);
        soapEnvelope.setOutputSoapObject(soapReq);

        //set security header for PAYU
        Element header[] = new Element[1];
        header[0] = new Element().createElement("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "Security");
        header[0].setAttribute(null, "v:mustUnderstand", "1");

        Element to = new Element().createElement("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "UsernameToken");

        Element action1 = new Element().createElement(null, "n0:Username");
        action1.setAttribute("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", "Id", "UsernameToken-9");
        action1.addChild(Node.TEXT, username);
        to.addChild(Node.ELEMENT, action1);

        Element action2 = new Element().createElement(null, "n0:Password");
        action2.setAttribute(null, "Type", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText");
        action2.addChild(Node.TEXT, password);
        to.addChild(Node.ELEMENT, action2);

        header[0].addChild(Node.ELEMENT, to);

        soapEnvelope.headerOut = header;

        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        httpTransport.debug = true;
        try {
            if (headers != null) {
                httpTransport.call("http://soap.api.controller.web.payjar.com/setTransaction", soapEnvelope, headers);
            } else {
                httpTransport.call("http://soap.api.controller.web.payjar.com/setTransaction", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            String a = soapEnvelope.toString();
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    SetTransactionResponseMessage resultVariable = new SetTransactionResponseMessage(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public void hiAsync() throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        hiAsync(null);
    }

    public void hiAsync(final List<HeaderProperty> headers) throws Exception {

        new AsyncTask<Void, Void, String>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            @Override
            protected String doInBackground(Void... params) {
                return hi(headers);
            }

            @Override
            protected void onPostExecute(String result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("hi", result);
                }
            }
        }.execute();
    }

    public String hi() {
        return hi(null);
    }

    public String hi(List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://soap.api.controller.web.payjar.com/", "hi");
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://soap.api.controller.web.payjar.com/hi", soapEnvelope, headers);
            } else {
                httpTransport.call("http://soap.api.controller.web.payjar.com/hi", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                        SoapPrimitive j = (SoapPrimitive) obj;
                        String resultVariable = j.toString();
                        return resultVariable;
                    } else if (obj != null && obj instanceof String) {
                        String resultVariable = (String) obj;
                        return resultVariable;
                    }
                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return "";
    }

}
